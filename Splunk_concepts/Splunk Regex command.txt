How to use Regex command 

a) The erex command

When using regular expression in Splunk, we can use the erex command to extract data from a field when we do not know the regular expression to use.

Syntax for the command:

| erex <thefieldname> examples=“exampletext1,exampletext2”


b) How to Use Regex command (rex)

When using regular expression in Splunk, you can use the rex command to either extract fields using regular expression-named groups or replace or substitute characters in a field using those expressions.

Syntax for the command:

| rex field=field_to_rex_from “FrontAnchor(?<new_field_name>{characters}+)BackAnchor”

Let’s take a look at an example.

This SPL allows you to extract from the field of useragent and create a new field called WebVersion:

index=web host=www1
| rex field=useragent "^(?<WebVersion>[\S+]*)"


c) The Concepts of Regex

The Main Rules
^ = match beginning of the line

$ = match end of the line

Regex Flags
/g = global matches (match all), don’t return after first match

/m = multi-line

/gm = global and multi-line are set

/i = case insensitive

Setting Characters
\w = word character

\W = not a word character

\s = white space

\S = not white space

\d = a digit

\D = not a digit

\. = the period key

Setting Options
* = zero or more

+ = 1 or more

? = optional, zero or 1

| = acts as an “or” expression

\ = escape special characters

( ) = allows for character groupings, wraps the regex sets

Some Examples
\d{4} = match 4 digits in a row of a digit equal to [0-9]

\d{4,5} = match 4 digits in a row or 5 digits in a row whose values are [0-9]

[a-z] = match between a-z

[A-Z] = match between A-Z

[0-9] = match between 0-9

(t|T) = match a lowercase “t” or uppercase “T”

(t|T)he = look for the word “the” or “The”

Regex Examples
If you’re looking for a phone number, try out this regex setup:

\d{10} = match 10 digits in a row

OR

\d {3}-?\d{3}-?\d{4} = match a number that may have been written with dashes 123-456-7890

OR

\d{3}[.-]?\d{3}[.-]?\d{4} = match a phone number that may have dashes or periods as separators

OR

(\d{3})[.-]?(\d{3})[.-]?(\d{4}) = using parentheses allows for character grouping. When you group, you can assign names to the groups and label one. For example, you can label the first group as “area code”.

 

If you’re looking for a IP address, try out this regex setup:

\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3} = searches for digits that are 1-3 in length, separated by periods.

d) Examples

example1

I have a field in Splunk events named employees_type with value: Jones Thomas ( contractor).  Write a Splunk statement to extract the string contractor  from employees_type field and assign it to a new field result, explain every steps in the Splunk query.

 sample solution
To extract the string contractor from the employees_type field in Splunk and assign it to a new field named result, you can use the rex command with a regular expression that captures the desired substring. Here’s how to do it step by step:

1. Identify the Pattern
First, you need to identify the common pattern in the employees_type field. Based on your example, the value Jones Thomas (contractor) suggests that the string you want to extract (contractor) is enclosed within parentheses.

2. Construct the Regular Expression
To extract a word within parentheses, you can use a regular expression with a named capturing group. The general pattern for capturing text within parentheses is \((.*?)\). Here's how it breaks down:

\(: Escapes the opening parenthesis, telling the regex to treat it as a character to match in the text, not a regex grouping construct.
(.*?): This is a capturing group that matches any character (.) any number of times (*), as few times as possible to make the match (?). This laziness ensures that if there are multiple sets of parentheses, you only capture up to the first closing parenthesis.
\): Escapes the closing parenthesis, similar to the opening parenthesis.
Since you want to specifically extract the term like contractor, and assuming it does not include any parentheses itself, you can refine this to capture a word character sequence. The regex for a word is \w+. However, to make sure it captures terms that might have spaces (assuming future variability), sticking with .*? is safer but ensure it's clearly defined by the parentheses.

3. Apply the rex Command with the Regex
The Splunk rex command syntax for this operation would look something like this:

... | rex field=employees_type "\((?<result>.*?)\)"
Explanation:

rex: This command tells Splunk to apply a regular expression to the data.
field=employees_type: This specifies that the regular expression should be applied to the employees_type field.
"\((?<result>.*?)\)": This is the regular expression pattern.
\(: Matches the opening parenthesis.
(?<result>.*?): This is a named capturing group. It tells Splunk to match any characters (.*?) in a non-greedy manner until the first closing parenthesis it encounters and store that match in a new field called result.
\): Matches the closing parenthesis.

  Add a Default Value to the result field with the eval comand

... | eval result=if(result!="contractor", "default_value", result)

Replace "default_value" with whatever default value you'd like to assign when result is not "contractor".

Combining Both Steps into a Single Query
Putting it all together, the Splunk query looks like this:

... | rex field=employees_type "\((?<result>.*?)\)"
| eval result=if(result!="contractor", "default_value", result)


Example 2: Extracting Username and Action from a Log Line
Scenario: Your log format includes entries like user=john_doe action=login.

Step 1: Identify the Patterns

The pattern includes user= followed by a username and action= followed by an action.
Step 2: Write the Regex with Named Capturing Groups

For username: user=(?<username>\S+)
For action: action=(?<action>\S+)
Combine them: user=(?<username>\S+) action=(?<action>\S+)
Step 3: Apply the rex Command

... | rex "user=(?<username>\S+) action=(?<action>\S+)"
Explanation:

This command looks for the specified pattern in your log data.
It extracts the username into a field named username and the action into a field named action.



Understanding the Basics of rex
Command Syntax: The basic syntax for rex is:

... | rex field=source_field "your_regular_expression"
field=source_field specifies the field from which you want to extract data. If not mentioned, Splunk uses the _raw field by default.
"your_regular_expression" is where you define the regex pattern to match the data you want to extract. Named capturing groups within this pattern are used to extract data into fields.

Using Named Capturing Groups
Named capturing groups are denoted by (?<fieldname>pattern), where:

fieldname is the name you assign to the extracted field.
pattern is the regex pattern that matches the data you want to capture.

Example 3: Extracting an IP Address
Scenario: Suppose you have log entries with IP addresses mentioned as IP: 192.168.1.1, and you want to extract the IP address.

Step 1: Identify the Pattern

First, identify the common pattern in your log data. Here, IP addresses follow IP:.
Step 2: Write the Regex

Use a basic IP address regex pattern: \d+\.\d+\.\d+\.\d+
Wrap it in a named capturing group for extraction: (?<ip_address>\d+\.\d+\.\d+\.\d+)
Step 3: Apply the rex Command

... | rex "IP: (?<ip_address>\d+\.\d+\.\d+\.\d+)"
Explanation:

This command searches through your log data for the pattern "IP: " followed by an IP address.
It extracts the IP address into a new field named ip_address.

References

https://regex101.com/

https://kinneygroup.com/blog/regular-expressions-in-splunk/

https://docs.splunk.com/Documentation/Splunk/8.1.0/SearchReference/Erex

https://docs.splunk.com/Documentation/Splunk/8.1.0/SearchReference/Rex







